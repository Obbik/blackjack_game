[{"/home/norbert/Desktop/node/blackjack_game/src/index.js":"1","/home/norbert/Desktop/node/blackjack_game/src/App.js":"2","/home/norbert/Desktop/node/blackjack_game/src/components/game/game.js":"3","/home/norbert/Desktop/node/blackjack_game/src/api/index.js":"4"},{"size":221,"mtime":1610996772120,"results":"5","hashOfConfig":"6"},{"size":5009,"mtime":1611164905645,"results":"7","hashOfConfig":"6"},{"size":691,"mtime":1611159249122,"results":"8","hashOfConfig":"6"},{"size":287,"mtime":1610997691482,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1syjwli",{"filePath":"13","messages":"14","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"12"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"/home/norbert/Desktop/node/blackjack_game/src/index.js",[],["22","23"],"/home/norbert/Desktop/node/blackjack_game/src/App.js",["24","25","26","27","28","29","30","31"],"import React, { useEffect, useState } from \"react\"\nimport './App.css';\nimport * as api from './api'\nimport Game from './components/game/game'\n\n\nconst App = () => {\n\n  const [hand, setHand] = useState(\n    {\n      croupier: [],\n      player: []\n    })\n\n  const [values, setValues] = useState({\n    win: null,\n    wallet: 1000,\n    round: 0,\n    roundOver: true,\n    croupierTotalValue: 0,\n    playerTotalValue: 0,\n    game: false\n\n  })\n  const [id, setid] = useState()\n\n  const getDeck = async () => {\n    try {\n      const { data } = await api.fetchDeck()\n      console.log(\"id_set\")\n      setid(data.deck_id)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  const drawCard = async (id, amount) => {\n    try {\n      const { data } = await api.getCard(id, amount)\n      return data\n    }\n    catch (e) {\n      console.error(e)\n    }\n  }\n  const getInitialCards = async (id) => {\n    const { cards } = await drawCard(id, 4)\n    setHand(prevState => (\n      {\n        ...prevState,\n        croupier: [...prevState.croupier, cards[0], cards[1]],\n        player: [...prevState.player, cards[2], cards[3]]\n      }))\n\n  }\n  const getCardValue = (value, actualPlayerTotalValue) => {\n    if (value == \"JACK\" || value == \"QUEEN\" || value == \"KING\") {\n      return 10\n    }\n    else if (value == \"ACE\") {\n      let aceVal = 11\n      if (actualPlayerTotalValue === 11) return 10\n      if (actualPlayerTotalValue[0] && actualPlayerTotalValue[1] == \"ACE\") return 21\n      if (aceVal + actualPlayerTotalValue >= 21) {\n        aceVal = 20 - actualPlayerTotalValue;\n        aceVal = aceVal < 1 ? 1 : aceVal\n        return parseInt(aceVal)\n      }\n      else {\n        return parseInt(aceVal)\n      }\n    }\n    else {\n      return value\n    }\n  }\n\n  const sumHandValues = (hand) => {\n    let sum = 0\n    for (let i = 0; i < hand.length; i++) {\n      sum = sum + parseInt(getCardValue(Object.values(hand[i])[3], values.croupierTotalValue))\n    }\n    return sum\n  }\n\n  const startGame = (money) => {\n    setValues(prevState => ({ ...prevState, game: true, roundOver: false, win: null }))\n    values.roundOver ?\n      setValues(prevState => (\n        { ...prevState, wallet: prevState.wallet - money, round: prevState + 1 }))\n      :\n      setValues(prevState => (\n        { ...prevState, wallet: prevState.wallet }))\n  }\n\n\n  const checkWinOrLose = (score) => {\n\n    if (score - values.croupierTotalValue < 0) {\n      setValues(prevState => ({ ...prevState, win: false }))\n    }\n    else if (score - values.croupierTotalValue > 0) {\n      setValues(prevState => ({ ...prevState, win: true }))\n    }\n    else if (score - values.croupierTotalValue == 0) {\n\n      setValues(prevState => ({ ...prevState, win: \"draw\" }))\n\n    }\n  }\n\n\n  const endRound = async () => {\n    if (values.game === true) {\n      if (values.croupierTotalValue < 17) {\n        const { cards } = await drawCard(id, 1)\n        setHand(prevState => (\n          {\n            ...prevState,\n            croupier: [...prevState.croupier, cards[0]],\n          }))\n      }\n      setValues(prevState => ({ ...prevState, roundOver: true, round: prevState + 1 }))\n    }\n  }\n\n  useEffect(() => {\n    getDeck()\n  }, [])\n  useEffect(() => {\n\n    if (values.playerTotalValue > 21) {\n      setValues(prevState => ({ ...prevState, win: false }))\n    }\n\n  }, [values.playerTotalValue])\n\n\n  useEffect(() => {\n    if (id) {\n      getInitialCards(id)\n    }\n  }, [id])\n\n  useEffect(() => {\n    if (values.playerTotalValue > 21) {\n      setValues(prevState => ({ ...prevState, win: false }))\n    }\n    setValues(prevState => (\n      {\n        ...prevState,\n        croupierTotalValue: sumHandValues(hand.croupier),\n        playerTotalValue: sumHandValues(hand.player)\n      }))\n  }, [hand])\n\n  const showResoultMessage = (win) => {\n    if (win === null) { return null }\n    if (win === true) { return <div>You Win! </div> }\n    if (win === false) { return <div>You Lose! </div> }\n    if (win === \"draw\") { return <div>Draw! </div> }\n  }\n  return (\n    <div className=\"App\">\n      <h1> {showResoultMessage(values.win)}</h1>\n      {values.game ? < Game values={values} hands={hand} /> : null}\n      <div className=\"userButton\">\n        <p>{values.wallet}</p>\n        <p>\n          <button\n            onClick={() => startGame(100)}>\n            startGame\n            </button>\n          <button onClick={async () => {\n            if (values.roundOver !== true) {\n              let card = await drawCard(id, 1)\n              setHand(prevState => (\n                (\n                  {\n                    ...prevState,\n                    player: [...prevState.player, card.cards[0]]\n                  })\n              ))\n            }\n\n          }}> Hit</button>\n\n          <button onClick={() => endRound().then(checkWinOrLose(values.playerTotalValue))}>\n            Stand\n          </button>\n\n          <button onClick={() => checkWinOrLose(values.playerTotalValue)}>\n            Dauble Down\n          </button>\n        </p>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","/home/norbert/Desktop/node/blackjack_game/src/components/game/game.js",["32","33","34","35"],"import React, { useEffect, useState } from 'react'\n\nconst Game = (props) => {\n\n    return (\n\n        <div>\n            <div>\n                {props.hands.croupier.map((card) => (<img src={card.image} />))}\n                <p>{(props.values.croupierTotalValue)}</p>\n            </div>\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <div>\n                <p>{(props.values.playerTotalValue)}</p>\n                {props.hands.player.map((card) => (<img src={card.image} />))}\n            </div>\n        </div>\n    )\n}\n\nexport default Game\n","/home/norbert/Desktop/node/blackjack_game/src/api/index.js",[],["36","37"],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":56,"column":15,"nodeType":"44","messageId":"45","endLine":56,"endColumn":17},{"ruleId":"42","severity":1,"message":"43","line":56,"column":34,"nodeType":"44","messageId":"45","endLine":56,"endColumn":36},{"ruleId":"42","severity":1,"message":"43","line":56,"column":54,"nodeType":"44","messageId":"45","endLine":56,"endColumn":56},{"ruleId":"42","severity":1,"message":"43","line":59,"column":20,"nodeType":"44","messageId":"45","endLine":59,"endColumn":22},{"ruleId":"42","severity":1,"message":"43","line":62,"column":66,"nodeType":"44","messageId":"45","endLine":62,"endColumn":68},{"ruleId":"42","severity":1,"message":"43","line":104,"column":48,"nodeType":"44","messageId":"45","endLine":104,"endColumn":50},{"ruleId":"46","severity":1,"message":"47","line":142,"column":6,"nodeType":"48","endLine":142,"endColumn":10,"suggestions":"49"},{"ruleId":"46","severity":1,"message":"50","line":154,"column":6,"nodeType":"48","endLine":154,"endColumn":12,"suggestions":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":17,"nodeType":"54","messageId":"55","endLine":1,"endColumn":26},{"ruleId":"52","severity":1,"message":"56","line":1,"column":28,"nodeType":"54","messageId":"55","endLine":1,"endColumn":36},{"ruleId":"57","severity":1,"message":"58","line":9,"column":54,"nodeType":"59","endLine":9,"endColumn":78},{"ruleId":"57","severity":1,"message":"58","line":24,"column":52,"nodeType":"59","endLine":24,"endColumn":76},{"ruleId":"38","replacedBy":"60"},{"ruleId":"40","replacedBy":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getInitialCards'. Either include it or remove the dependency array.","ArrayExpression",["64"],"React Hook useEffect has missing dependencies: 'sumHandValues' and 'values.playerTotalValue'. Either include them or remove the dependency array.",["65"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["62"],["63"],"no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},"Update the dependencies array to be: [getInitialCards, id]",{"range":"70","text":"71"},"Update the dependencies array to be: [hand, sumHandValues, values.playerTotalValue]",{"range":"72","text":"73"},[3394,3398],"[getInitialCards, id]",[3713,3719],"[hand, sumHandValues, values.playerTotalValue]"]